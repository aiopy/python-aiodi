{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Dependency Injection library Requirements Python 3.6+ Installation python3 -m pip install aiodi Example def main () -> None : pass if __name__ == '__main__' : main () License MIT WIP","title":"aiodi"},{"location":"#python-dependency-injection-library","text":"","title":"Python Dependency Injection library"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"python3 -m pip install aiodi","title":"Installation"},{"location":"#example","text":"def main () -> None : pass if __name__ == '__main__' : main ()","title":"Example"},{"location":"#license","text":"MIT","title":"License"},{"location":"#wip","text":"","title":"WIP"},{"location":"en/","text":"Python Dependency Injection library Requirements Python 3.6+ Installation python3 -m pip install aiodi Example from abc import ABC , abstractmethod from logging import Logger , getLogger , NOTSET , StreamHandler , Formatter from os import getenv from aiodi import Container from typing import Optional , Union _CONTAINER : Optional [ Container ] = None def get_simple_logger ( name : Optional [ str ] = None , level : Union [ str , int ] = NOTSET , fmt : str = '[ %(asctime)s ] - %(name)s - %(levelname)s - %(message)s ' , ) -> Logger : logger = getLogger ( name ) logger . setLevel ( level ) handler = StreamHandler () handler . setLevel ( level ) formatter = Formatter ( fmt ) handler . setFormatter ( formatter ) logger . addHandler ( handler ) return logger class GreetTo ( ABC ): @abstractmethod def __call__ ( self , who : str ) -> None : pass class GreetToWithPrint ( GreetTo ): def __call__ ( self , who : str ) -> None : print ( 'Hello ' + who ) class GreetToWithLogger ( GreetTo ): _logger : Logger def __init__ ( self , logger : Logger ) -> None : self . _logger = logger def __call__ ( self , who : str ) -> None : self . _logger . info ( 'Hello ' + who ) def container () -> Container : global _CONTAINER if _CONTAINER : return _CONTAINER di = Container ({ 'env' : { 'name' : getenv ( 'APP_NAME' , 'aiodi' ), 'log_level' : getenv ( 'APP_LEVEL' , 'INFO' ), }}) di . resolve ([ ( Logger , get_simple_logger , { 'name' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.name' , typ = str )), 'level' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.log_level' , typ = str )), }, ), ( GreetTo , GreetToWithLogger ), # -> (GreetTo, GreetToWithLogger, {}) GreetToWithPrint , # -> (GreetToWithPrint, GreetToWithPrint, {}) ]) di . set ( 'who' , 'World!' ) # ... _CONTAINER = di return di def main () -> None : di = container () di . get ( Logger ) . info ( 'Just simple call get with the type' ) for greet_to in di . get ( GreetTo , instance_of = True ): greet_to ( di . get ( 'who' )) if __name__ == '__main__' : main () License MIT WIP","title":"Python Dependency Injection library"},{"location":"en/#python-dependency-injection-library","text":"","title":"Python Dependency Injection library"},{"location":"en/#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"en/#installation","text":"python3 -m pip install aiodi","title":"Installation"},{"location":"en/#example","text":"from abc import ABC , abstractmethod from logging import Logger , getLogger , NOTSET , StreamHandler , Formatter from os import getenv from aiodi import Container from typing import Optional , Union _CONTAINER : Optional [ Container ] = None def get_simple_logger ( name : Optional [ str ] = None , level : Union [ str , int ] = NOTSET , fmt : str = '[ %(asctime)s ] - %(name)s - %(levelname)s - %(message)s ' , ) -> Logger : logger = getLogger ( name ) logger . setLevel ( level ) handler = StreamHandler () handler . setLevel ( level ) formatter = Formatter ( fmt ) handler . setFormatter ( formatter ) logger . addHandler ( handler ) return logger class GreetTo ( ABC ): @abstractmethod def __call__ ( self , who : str ) -> None : pass class GreetToWithPrint ( GreetTo ): def __call__ ( self , who : str ) -> None : print ( 'Hello ' + who ) class GreetToWithLogger ( GreetTo ): _logger : Logger def __init__ ( self , logger : Logger ) -> None : self . _logger = logger def __call__ ( self , who : str ) -> None : self . _logger . info ( 'Hello ' + who ) def container () -> Container : global _CONTAINER if _CONTAINER : return _CONTAINER di = Container ({ 'env' : { 'name' : getenv ( 'APP_NAME' , 'aiodi' ), 'log_level' : getenv ( 'APP_LEVEL' , 'INFO' ), }}) di . resolve ([ ( Logger , get_simple_logger , { 'name' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.name' , typ = str )), 'level' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.log_level' , typ = str )), }, ), ( GreetTo , GreetToWithLogger ), # -> (GreetTo, GreetToWithLogger, {}) GreetToWithPrint , # -> (GreetToWithPrint, GreetToWithPrint, {}) ]) di . set ( 'who' , 'World!' ) # ... _CONTAINER = di return di def main () -> None : di = container () di . get ( Logger ) . info ( 'Just simple call get with the type' ) for greet_to in di . get ( GreetTo , instance_of = True ): greet_to ( di . get ( 'who' )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"en/#license","text":"MIT","title":"License"},{"location":"en/#wip","text":"","title":"WIP"},{"location":"es/","text":"Librer\u00eda para la Inyecci\u00f3n de Dependencias en Python Requisitos Python 3.6+ Instalaci\u00f3n python3 -m pip install aiodi Ejemplo from abc import ABC , abstractmethod from logging import Logger , getLogger , NOTSET , StreamHandler , Formatter from os import getenv from aiodi import Container from typing import Optional , Union _CONTAINER : Optional [ Container ] = None def get_simple_logger ( name : Optional [ str ] = None , level : Union [ str , int ] = NOTSET , fmt : str = '[ %(asctime)s ] - %(name)s - %(levelname)s - %(message)s ' , ) -> Logger : logger = getLogger ( name ) logger . setLevel ( level ) handler = StreamHandler () handler . setLevel ( level ) formatter = Formatter ( fmt ) handler . setFormatter ( formatter ) logger . addHandler ( handler ) return logger class GreetTo ( ABC ): @abstractmethod def __call__ ( self , who : str ) -> None : pass class GreetToWithPrint ( GreetTo ): def __call__ ( self , who : str ) -> None : print ( 'Hello ' + who ) class GreetToWithLogger ( GreetTo ): _logger : Logger def __init__ ( self , logger : Logger ) -> None : self . _logger = logger def __call__ ( self , who : str ) -> None : self . _logger . info ( 'Hello ' + who ) def container () -> Container : global _CONTAINER if _CONTAINER : return _CONTAINER di = Container ({ 'env' : { 'name' : getenv ( 'APP_NAME' , 'aiodi' ), 'log_level' : getenv ( 'APP_LEVEL' , 'INFO' ), }}) di . resolve ([ ( Logger , get_simple_logger , { 'name' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.name' , typ = str )), 'level' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.log_level' , typ = str )), }, ), ( GreetTo , GreetToWithLogger ), # -> (GreetTo, GreetToWithLogger, {}) GreetToWithPrint , # -> (GreetToWithPrint, GreetToWithPrint, {}) ]) di . set ( 'who' , 'World!' ) # ... _CONTAINER = di return di def main () -> None : di = container () di . get ( Logger ) . info ( 'Just simple call get with the type' ) for greet_to in di . get ( GreetTo , instance_of = True ): greet_to ( di . get ( 'who' )) if __name__ == '__main__' : main () Licencia MIT WIP","title":"Librer\u00eda para la Inyecci\u00f3n de Dependencias en Python"},{"location":"es/#libreria-para-la-inyeccion-de-dependencias-en-python","text":"","title":"Librer\u00eda para la Inyecci\u00f3n de Dependencias en Python"},{"location":"es/#requisitos","text":"Python 3.6+","title":"Requisitos"},{"location":"es/#instalacion","text":"python3 -m pip install aiodi","title":"Instalaci\u00f3n"},{"location":"es/#ejemplo","text":"from abc import ABC , abstractmethod from logging import Logger , getLogger , NOTSET , StreamHandler , Formatter from os import getenv from aiodi import Container from typing import Optional , Union _CONTAINER : Optional [ Container ] = None def get_simple_logger ( name : Optional [ str ] = None , level : Union [ str , int ] = NOTSET , fmt : str = '[ %(asctime)s ] - %(name)s - %(levelname)s - %(message)s ' , ) -> Logger : logger = getLogger ( name ) logger . setLevel ( level ) handler = StreamHandler () handler . setLevel ( level ) formatter = Formatter ( fmt ) handler . setFormatter ( formatter ) logger . addHandler ( handler ) return logger class GreetTo ( ABC ): @abstractmethod def __call__ ( self , who : str ) -> None : pass class GreetToWithPrint ( GreetTo ): def __call__ ( self , who : str ) -> None : print ( 'Hello ' + who ) class GreetToWithLogger ( GreetTo ): _logger : Logger def __init__ ( self , logger : Logger ) -> None : self . _logger = logger def __call__ ( self , who : str ) -> None : self . _logger . info ( 'Hello ' + who ) def container () -> Container : global _CONTAINER if _CONTAINER : return _CONTAINER di = Container ({ 'env' : { 'name' : getenv ( 'APP_NAME' , 'aiodi' ), 'log_level' : getenv ( 'APP_LEVEL' , 'INFO' ), }}) di . resolve ([ ( Logger , get_simple_logger , { 'name' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.name' , typ = str )), 'level' : di . resolve_parameter ( lambda di_ : di_ . get ( 'env.log_level' , typ = str )), }, ), ( GreetTo , GreetToWithLogger ), # -> (GreetTo, GreetToWithLogger, {}) GreetToWithPrint , # -> (GreetToWithPrint, GreetToWithPrint, {}) ]) di . set ( 'who' , 'World!' ) # ... _CONTAINER = di return di def main () -> None : di = container () di . get ( Logger ) . info ( 'Just simple call get with the type' ) for greet_to in di . get ( GreetTo , instance_of = True ): greet_to ( di . get ( 'who' )) if __name__ == '__main__' : main ()","title":"Ejemplo"},{"location":"es/#licencia","text":"MIT","title":"Licencia"},{"location":"es/#wip","text":"","title":"WIP"}]}