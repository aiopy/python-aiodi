[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project]
authors = [
    { name = "ticdenis", email = "denisnavarroalcaide@outlook.es" },
    { name = "yasti4", email = "adria_4_@hotmail.com" },
]
maintainers = [
    { name = "ticdenis", email = "denisnavarroalcaide@outlook.es" }
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
dependencies = [
    'tomli==2.0.1; python_version<"3.11"',
]
description = "Container for the Dependency Injection in Python."
dynamic = ["version"]
keywords = ["di", "dependency", "container", "aio", "async"]
license = { text = "MIT" }
name = "aiodi"
readme = "README.md"
requires-python = ">=3.7"

[project.optional-dependencies]
dev = [
    "pre-commit==2.19.0",
    "types-toml==0.10.7",
]
deploy = [
    "build==0.8.0",
    "setuptools==62.3.2",
    "twine==4.0.1",
    "wheel==0.37.1",
]
docs = [
    "mkdocs==1.3.0",
    "mkdocs-material==8.2.15",
]
fmt = [
    "black==22.3.0",
    "isort==5.10.1",
]
security-analysis = [
    "bandit==1.7.4",
    "liccheck==0.7.1",
]
static-analysis = [
    "mypy==0.960",
    "pylint==2.14.0",
]
test = [
    "nest-asyncio==1.5.5",
    "psutil==5.9.1",
    "pytest==7.1.2",
    "pytest-asyncio==0.18.3",
    "pytest-cov==3.0.0",
    "pytest-xdist==2.5.0",
]

[project.urls]
"documentation" = "https://aiopy.github.io/python-aiodi/"
"repository" = "https://github.com/aiopy/python-aiodi"

[tool.setuptools.dynamic]
version = { attr = "aiodi.__version__" }

[tool.setuptools.packages.find]
include = ["aiodi*"]

[tool.setuptools.package-data]
"aiodi" = ["py.typed"]

[tool.black]
include = '\.pyi?$'
line-length = 120
skip-string-normalization = true

[tool.coverage.paths]
source = ["aiodi"]
[tool.coverage.run]
data_file = "var/coverage/.coverage"
disable_warnings = ["no-data-collected"]
source = ["tests"]
[tool.coverage.report]
fail_under = 70
[tool.coverage.html]
directory = "var/coverage"

[tool.isort]
profile = "black"

[tool.liccheck]
authorized_licenses = ["MIT"]
no_deps = true
dependencies = true

[tool.mypy]
strict = true
cache_dir = "var/cache/.mypy_cache"

[tool.pylint.master]
jobs = "0"
[tool.pylint.messages_control]
disable = "C0103,C0114,C0115,C0116,C0201,C0205,C0209,C0301,C0415,E1102,E0401,E0611,E0711,E1136,R0902,R0903,R0912,R0914,R1704,R1717,R1725,W0102,W0108,W0212,W0235,W0236,W0603,W0611,W0622,W0703,W0707,W1202"

[tool.pytest.ini_options]
cache_dir = "var/pytest"
addopts = "-q -n auto -p no:warnings --no-cov-on-fail"
testpaths = ["tests"]

[tool.run-script]
install = "python3 -m pip install ."
dev-install = "python3 -m pip install .[dev,deploy,docs,fmt,security-analysis,static-analysis,test]"
deploy = """
python3 -m build --no-isolation --wheel --sdist
python3 -m twine upload dist/*
"""
docs = "python3 -m mkdocs build -f ./docs_src/mkdocs.yml -d ./docs"
fmt = """
python3 -m black aiodi tests
python3 -m isort aiodi tests
"""
security-analysis = """
python3 -m liccheck
python3 -m bandit -s B101,B311 -r aiodi
"""
static-analysis = """
python3 -m mypy aiodi
python3 -m pylint aiodi
"""
test = "python3 -m pytest"
unit-tests = "python3 -m pytest tests/unit"
integration-tests = "python3 -m pytest tests/integration"
functional-tests = "python3 -m pytest tests/functional"
coverage = "python3 -m pytest --cov --cov-report=html"
tox = "python3 -m pip install -U tox tox-gh-actions && tox"
clean = """python3 -c \"
from glob import iglob
from shutil import rmtree

for pathname in ['./build', './*.egg-info', './dist', './var', '**/__pycache__']:
  for path in iglob(pathname, recursive=True):
    rmtree(path, ignore_errors=True)
\""""

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37, py38, py39, py310
isolated_build = True
skipsdist = True
skip_missing_interpreters = True
toxworkdir = var/tox

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310

[testenv]
deps = .[dev,deploy,docs,fmt,security-analysis,static-analysis,test]
commands = pytest
"""
